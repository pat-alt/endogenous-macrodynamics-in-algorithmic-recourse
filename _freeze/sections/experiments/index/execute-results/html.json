{
  "hash": "280ceb062e885c1d41c4290ff2c456a3",
  "result": {
    "markdown": "---\ntitle: Experimental Results\n---\n\nThis is a supplementary appendix to the research paper **Endogenous Macrodynamics in Algorithmic Recourse**. It contains all of the experimental results, including those not highlighted in the actual paper. It also links to additional information about the proposed mitigation strategies.\n\n### Synthetic Data {#sec-app-synthetic}\n\nThis notebook was used to run the experiments for the synthetic datasets and can be used to reproduce the results in the paper. In the following we first run the experiments and then generate visualizations and tables.\n\n#### Experiment\n\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nmodels = [\n    :LogisticRegression, \n    :FluxModel, \n    :FluxEnsemble,\n]\ngenerators = Dict(\n    :Greedy=>GreedyGenerator(), \n    :Generic=>GenericGenerator(),\n    :REVISE=>REVISEGenerator(),\n    :DICE=>DiCEGenerator(),\n)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nmax_obs = 1000\ncatalogue = load_synthetic(max_obs; data_dir=data_path)\nchoices = [\n    :linearly_separable, \n    :overlapping, \n    :circles, \n    :moons,\n]\ndata_sets = filter(p -> p[1] in choices, catalogue)\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nexperiments = set_up_experiments(data_sets,models,generators)\n```\n:::\n\n\n@fig-test-before shows the test data before running the experiment.\n\n::: {#fig-test-before .cell execution_count=5}\n``` {.julia .cell-code}\nplts = []\nfor (exp_name, exp_) in experiments\n    for (M_name, M) in exp_.models\n        score = round(model_evaluation(M, exp_.test_data),digits=2)\n        plt = plot(M, exp_.test_data, title=\"$exp_name;\\n $M_name ($score)\")\n        # Errors:\n        ids = findall(vec(round.(probs(M, exp_.test_data.X)) .!= exp_.test_data.y))\n        x_wrongly_labelled = exp_.test_data.X[:,ids]\n        scatter!(plt, x_wrongly_labelled[1,:], x_wrongly_labelled[2,:], ms=7.5, color=:red, label=\"\")\n        plts = vcat(plts..., plt)\n    end\nend\nplt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))\nsavefig(plt, joinpath(www_path,\"models_test_before.png\"))\nplt\n```\n:::\n\n\n@fig-train-before shows the training data before running the experiment.\n\n::: {#fig-train-before .cell execution_count=6}\n``` {.julia .cell-code}\nusing AlgorithmicRecourseDynamics.Models: model_evaluation\nplts = []\nfor (exp_name, exp_) in experiments\n    for (M_name, M) in exp_.models\n        score = round(model_evaluation(M, exp_.train_data),digits=2)\n        plt = plot(M, exp_.train_data, title=\"$exp_name;\\n $M_name ($score)\")\n        # Errors:\n        ids = findall(vec(round.(probs(M, exp_.train_data.X)) .!= exp_.train_data.y))\n        x_wrongly_labelled = exp_.train_data.X[:,ids]\n        scatter!(plt, x_wrongly_labelled[1,:], x_wrongly_labelled[2,:], ms=7.5, color=:red, label=\"\")\n        plts = vcat(plts..., plt)\n    end\nend\nplt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))\nsavefig(plt, joinpath(www_path,\"models_train_before.png\"))\nplt\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nn_evals = 5\nn_rounds = 50\nevaluate_every = Int(round(n_rounds/n_evals))\nn_folds = 5\nT = 100\nresults = run_experiments(\n    experiments;\n    save_path=output_path,evaluate_every=evaluate_every,n_rounds=n_rounds, n_folds=n_folds, T=T\n)\nSerialization.serialize(joinpath(output_path,\"results.jls\"),results)\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nplot_dict = Dict(key => Dict() for (key,val) in results)\nfold = 1\nfor (name, res) in results\n    exp_ = res.experiment\n    plot_dict[name] = Dict(key => [] for (key,val) in exp_.generators)\n    rec_sys = exp_.recourse_systems[fold]\n    sys_ids = collect(exp_.system_identifiers)\n    M = length(rec_sys)\n    for m in 1:M\n        model_name, generator_name = sys_ids[m]\n        M = rec_sys[m].model\n        score = round(model_evaluation(M, exp_.test_data),digits=2)\n        plt = plot(M, exp_.test_data, title=\"$name;\\n $model_name ($score)\")\n        # Errors:\n        ids = findall(vec(round.(probs(M, exp_.test_data.X)) .!= exp_.test_data.y))\n        x_wrongly_labelled = exp_.test_data.X[:,ids]\n        scatter!(plt, x_wrongly_labelled[1,:], x_wrongly_labelled[2,:], ms=7.5, color=:red, label=\"\")\n        plot_dict[name][generator_name] = vcat(plot_dict[name][generator_name], plt)\n    end\nend\nplot_dict = Dict(key => reduce(vcat, [plots[key] for plots in values(plot_dict)]) for (key, value) in generators)\nfor (name, plts) in plot_dict\n    plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))\n    savefig(plt, joinpath(www_path,\"models_test_after_$(name).png\"))\nend\n```\n:::\n\n\n@fig-test-after shows the test data after running the experiment.\n\n::: {#fig-test-after .cell layout-ncol='1' execution_count=9}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"models_test_after\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(Images.load(img))\nend\n```\n\nTest data after experiment\n:::\n\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nusing AlgorithmicRecourseDynamics.Models: model_evaluation\nplot_dict = Dict(key => Dict() for (key,val) in results)\nfold = 1\nfor (name, res) in results\n    exp_ = res.experiment\n    plot_dict[name] = Dict(key => [] for (key,val) in exp_.generators)\n    rec_sys = exp_.recourse_systems[fold]\n    sys_ids = collect(exp_.system_identifiers)\n    M = length(rec_sys)\n    for m in 1:M\n        model_name, generator_name = sys_ids[m]\n        M = rec_sys[m].model\n        data = rec_sys[m].data\n        score = round(model_evaluation(M, data),digits=2)\n        plt = plot(M, data, title=\"$name;\\n $model_name ($score)\")\n        # Errors:\n        ids = findall(vec(round.(probs(M, data.X)) .!= data.y))\n        x_wrongly_labelled = data.X[:,ids]\n        scatter!(plt, x_wrongly_labelled[1,:], x_wrongly_labelled[2,:], ms=7.5, color=:red, label=\"\")\n        plot_dict[name][generator_name] = vcat(plot_dict[name][generator_name], plt)\n    end\nend\nplot_dict = Dict(key => reduce(vcat, [plots[key] for plots in values(plot_dict)]) for (key, value) in generators)\nfor (name, plts) in plot_dict\n    plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))\n    savefig(plt, joinpath(www_path,\"models_train_after_$(name).png\"))\nend\n```\n:::\n\n\n@fig-train-after shows the training data after running the experiment.\n\n::: {#fig-train-after .cell layout-ncol='1' execution_count=11}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"models_train_after\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(Images.load(img))\nend\n```\n\nTraining data after experiment\n:::\n\n\n#### Plots\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nresults = Serialization.deserialize(joinpath(output_path,\"results.jls\"));\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nusing Images\nline_charts = Dict()\nerrorbar_charts = Dict()\nfor (data_name, res) in results\n    plt = plot(res)\n    Images.save(joinpath(www_path, \"line_chart_$(data_name).png\"), plt)\n    line_charts[data_name] = plt\n    plt = plot(res,maximum(res.output.n))\n    Images.save(joinpath(www_path, \"errorbar_chart_$(data_name).png\"), plt)\n    errorbar_charts[data_name] = plt\nend\n```\n:::\n\n\n##### Line Charts\n\n@fig-line shows the evolution of the evaluation metrics over the course of the experiment.\n\n::: {#fig-line .cell layout-ncol='1' execution_count=14}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"line_chart\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(Images.load(img))\nend\n```\n\nLine Charts\n:::\n\n\n##### Error Bar Charts\n\n@fig-error shows the evaluation metrics at the end of the experiments.\n\n::: {#fig-error .cell layout-ncol='1' execution_count=15}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"errorbar_chart\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(Images.load(img))\nend\n```\n\nError Bar Charts\n:::\n\n\n#### Bootstrap\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nn_bootstrap = 10\ndf = run_bootstrap(results, n_bootstrap; filename=joinpath(output_path,\"bootstrap.csv\"))\n```\n:::\n\n\n#### Chart in paper {#sec-app-synthetic-paper}\n\n@fig-paper shows the chart that went into the paper.\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nusing DataFrames, Statistics\ndf = results[:overlapping].output\ndf = df[[x âˆˆ maximum(df.n) for x in df.n],:]\ngdf = groupby(df, [:generator, :model, :n, :name, :scope])\ndf_plot = combine(gdf, :value => (x -> [(mean(x),mean(x)+std(x),mean(x)-std(x))]) => [:mean, :ymax, :ymin])\ndf_plot = df_plot[[name in [:decisiveness, :disagreement, :mmd, :mmd_grid, :model_performance] for name in df_plot.name],:]\ndf_plot = df_plot[.!(df_plot.name.==:mmd .&& df_plot.scope.==:model),:]\ndf_plot = mapcols(x -> typeof(x) == Vector{Symbol} ? string.(x) : x, df_plot)\ntransform!(df_plot, :name => (X -> [x==\"decisiveness\" ? \"Decisiveness\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"disagreement\" ? \"Disagreement\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"mmd\" ? \"MMD (domain)\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"mmd_grid\" ? \"MMD (model)\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"model_performance\" ? \"Performance\" : x for x in X]) => :name)\ntransform!(df_plot, :generator => (X -> [x==\"REVISE\" ? \"Latent\" : x for x in X]) => :generator)\ntransform!(df_plot, :model => (X -> [x==\"FluxEnsemble\" ? \"Deep Ensemble\" : x for x in X]) => :model)\ntransform!(df_plot, :model => (X -> [x==\"FluxModel\" ? \"MLP\" : x for x in X]) => :model)\ntransform!(df_plot, :model => (X -> [x==\"LogisticRegression\" ? \"Linear\" : x for x in X]) => :model)\n\nncol = length(unique(df_plot.model))\nnrow = length(unique(df_plot.name))\n\nscale_ = 1.5\nR\"\"\"\nlibrary(data.table)\ndf_plot <- data.table($df_plot)\nname_order <- c(\n    \"MMD (domain)\",\n    \"MMD (model)\",\n    \"Performance\",\n    \"Disagreement\",\n    \"Decisiveness\"\n)\ndf_plot[,name:=factor(name, levels=name_order)]\nmodel_order <- c(\"Linear\", \"MLP\", \"Deep Ensemble\")\ndf_plot[,model:=factor(model, levels=model_order)]\nlibrary(ggplot2)\nplt <- ggplot(df_plot) +\n    geom_bar(aes(x=n, y=mean, fill=generator), stat=\"identity\", alpha=0.5, position=\"dodge\") +\n    geom_pointrange(aes(x=n, y=mean, ymin=ymin, ymax=ymax, colour=generator), alpha=0.9, position=position_dodge(width=c(0.9,0.9)), size=0.5) +\n    facet_grid(\n        rows = vars(name),\n        cols =  vars(model), \n        scales = \"free_y\"\n    ) +\n    labs(y = \"Value\") + \n    scale_fill_discrete(name=\"Generator:\") +\n    scale_colour_discrete(name=\"Generator:\") +\n    theme(\n        axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        legend.position=\"bottom\"\n    )\ntemp_path <- file.path(tempdir(), \"plot.png\")\nggsave(temp_path, width=$ncol * $scale_,height=$nrow * $scale_ * 0.75) \n\"\"\"\n\nimg = Images.load(rcopy(R\"temp_path\"))\nImages.save(joinpath(www_path,\"paper_synthetic_results.png\"), img)\n```\n:::\n\n\n::: {#fig-paper .cell execution_count=18}\n``` {.julia .cell-code}\nImages.load(joinpath(www_path,\"paper_synthetic_results.png\"))\n```\n:::\n\n\n### Real-World Data\n\n\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nmodels = [\n    :LogisticRegression, \n    :FluxModel, \n    :FluxEnsemble\n]\ngenerators = Dict(\n    :Greedy=>GreedyGenerator(), \n    :Generic=>GenericGenerator(),\n    :REVISE=>REVISEGenerator(),\n    :DICE=>DiCEGenerator(),\n)\n```\n:::\n\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\nmax_obs = 2500\ndata_sets = load_real_world(max_obs)\nchoices = [\n    # :cal_housing, \n    # :credit_default, \n    :gmsc, \n]\ndata_sets = filter(p -> p[1] in choices, data_sets)\n```\n:::\n\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\nusing CounterfactualExplanations.DataPreprocessing: unpack\nbs = 500\nfunction data_loader(data::CounterfactualData)\n    X, y = unpack(data)\n    data = Flux.DataLoader((X,y),batchsize=bs)\n    return data\nend\nmodel_params = (batch_norm=false,n_hidden=64,n_layers=3,dropout=true,p_dropout=0.1)\n```\n:::\n\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\nexperiments = set_up_experiments(\n    data_sets,models,generators; \n    pre_train_models=100, model_params=model_params, \n    data_loader=data_loader\n)\n```\n:::\n\n\n#### Experiment\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\nn_evals = 5\nn_rounds = 50\nevaluate_every = Int(round(n_rounds/n_evals))\nn_folds = 5\nn_samples = 10000\nT = 100\ngenerative_model_params = (epochs=250, latent_dim=8)\nresults = run_experiments(\n    experiments;\n    save_path=output_path,evaluate_every=evaluate_every,n_rounds=n_rounds, n_folds=n_folds, T=T, n_samples=n_samples,\n    generative_model_params=generative_model_params\n)\nSerialization.serialize(joinpath(output_path,\"results.jls\"),results)\n```\n:::\n\n\n#### Plots\n\n::: {.cell execution_count=25}\n``` {.julia .cell-code}\nresults = Serialization.deserialize(joinpath(output_path,\"results.jls\"))\n```\n:::\n\n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\nusing Images\nline_charts = Dict()\nerrorbar_charts = Dict()\nfor (data_name, res) in results\n    plt = plot(res)\n    Images.save(joinpath(www_path, \"line_chart_$(data_name).png\"), plt)\n    line_charts[data_name] = plt\n    plt = plot(res,maximum(res.output.n))\n    Images.save(joinpath(www_path, \"errorbar_chart_$(data_name).png\"), plt)\n    errorbar_charts[data_name] = plt\nend\n```\n:::\n\n\n##### Line Charts\n\n@fig-real-line shows the evolution of the evaluation metrics over the course of the experiment.\n\n::: {#fig-real-line .cell layout-ncol='1' execution_count=27}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"line_chart\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(load(img))\nend\n```\n\nLine Charts\n:::\n\n\n##### Error Bar Charts\n\n@fig-real-error shows the evaluation metrics at the end of the experiments.\n\n::: {#fig-real-error .cell layout-ncol='1' execution_count=28}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"errorbar_chart\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(load(img))\nend\n```\n\nError Bar Charts\n:::\n\n\n#### Bootstrap\n\n::: {.cell execution_count=29}\n``` {.julia .cell-code}\nn_bootstrap = 10\ndf = run_bootstrap(results, n_bootstrap; filename=joinpath(output_path,\"bootstrap.csv\"))\n```\n:::\n\n\n#### Chart in paper\n\n@fig-real-paper shows the chart that went into the paper.\n\n::: {.cell execution_count=30}\n``` {.julia .cell-code}\nusing DataFrames, Statistics\nmodel_ = :FluxEnsemble\ndf = DataFrame() \nfor (key, val) in results\n    df_ = deepcopy(val.output)\n    df_.dataset .= key\n    df = vcat(df,df_)\nend\ndf = df[df.n .== maximum(df.n),:]\ndf = df[df.model .== model_,:]\nfilter!(:value => x -> !any(f -> f(x), (ismissing, isnothing, isnan)), df)\ngdf = groupby(df, [:generator, :dataset, :n, :name, :scope])\ndf_plot = combine(gdf, :value => (x -> [(mean(x),mean(x)+std(x),mean(x)-std(x))]) => [:mean, :ymax, :ymin])\ndf_plot = df_plot[[name in [:mmd, :model_performance] for name in df_plot.name],:]\ndf_plot = mapcols(x -> typeof(x) == Vector{Symbol} ? string.(x) : x, df_plot)\ndf_plot.name .= [r[:name] == \"mmd\" ? \"$(r[:name])_$(r[:scope])\" : r[:name] for r in eachrow(df_plot)]\ntransform!(df_plot, :dataset => (X -> [x==\"cal_housing\" ? \"California Housing\" : x for x in X]) => :dataset)\ntransform!(df_plot, :dataset => (X -> [x==\"credit_default\" ? \"Credit Default\" : x for x in X]) => :dataset)\ntransform!(df_plot, :dataset => (X -> [x==\"gmsc\" ? \"GMSC\" : x for x in X]) => :dataset)\ntransform!(df_plot, :name => (X -> [x==\"mmd_domain\" ? \"MMD (domain)\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"mmd_model\" ? \"MMD (model)\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"model_performance\" ? \"Performance\" : x for x in X]) => :name)\ntransform!(df_plot, :generator => (X -> [x==\"REVISE\" ? \"Latent\" : x for x in X]) => :generator)\n\nncol = length(unique(df_plot.dataset))\nnrow = length(unique(df_plot.name))\n\nusing RCall\nscale_ = 1.75\nR\"\"\"\nlibrary(ggplot2)\nplt <- ggplot($df_plot) +\n    geom_bar(aes(x=n, y=mean, fill=generator), stat=\"identity\", alpha=0.5, position=\"dodge\") +\n    geom_pointrange( aes(x=n, y=mean, ymin=ymin, ymax=ymax, colour=generator), alpha=0.9, position=position_dodge(width=0.9), size=0.5) +\n    facet_grid(\n        rows = vars(name),\n        cols =  vars(dataset), \n        scales = \"free_y\"\n    ) +\n    labs(y = \"Value\") + \n    scale_fill_discrete(name=\"Generator:\") +\n    scale_colour_discrete(name=\"Generator:\") +\n    theme(\n        axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        legend.position=\"bottom\"\n    )\ntemp_path <- file.path(tempdir(), \"plot.png\")\nggsave(temp_path,width=$ncol * $scale_,height=$nrow * $scale_ * 0.8) \n\"\"\"\n\nimg = Images.load(rcopy(R\"temp_path\"))\nImages.save(joinpath(www_path,\"paper_real_world_results.png\"), img)\n```\n:::\n\n\n::: {#fig-real-paper .cell execution_count=31}\n``` {.julia .cell-code}\nImages.load(joinpath(www_path,\"paper_real_world_results.png\"))\n```\n:::\n\n\n### Mitigation Strategies\n\n\n\n::: {.cell execution_count=33}\n``` {.julia .cell-code}\nmodels = [\n    :LogisticRegression, \n    :FluxModel, \n    :FluxEnsemble,\n]\ngenerators = Dict(\n    :Generic=>GenericGenerator(decision_threshold=0.5),\n    :Latent=>REVISEGenerator(),\n    :Generic_conservative=>GenericGenerator(decision_threshold=0.9),\n    :Gravitational=>GravitationalGenerator(),\n    :ClapROAR=>ClapROARGenerator()\n)\n```\n:::\n\n\n#### Synthetic\n\n::: {.cell execution_count=34}\n``` {.julia .cell-code}\nmax_obs = 1000\ncatalogue = AlgorithmicRecourseDynamics.Data.load_synthetic(max_obs)\nchoices = [\n    :linearly_separable, \n    :overlapping, \n    :circles, \n    :moons,\n]\ndata_sets = filter(p -> p[1] in choices, catalogue)\n```\n:::\n\n\n::: {.cell execution_count=35}\n``` {.julia .cell-code}\nexperiments = set_up_experiments(data_sets,models,generators)\n```\n:::\n\n\n::: {.cell execution_count=36}\n``` {.julia .cell-code}\nn_evals = 5\nn_rounds = 50\nevaluate_every = Int(round(n_rounds/n_evals))\nn_folds = 5\nT = 100\nusing Serialization\nresults = run_experiments(\n    experiments;\n    save_path=output_path,evaluate_every=evaluate_every,n_rounds=n_rounds, n_folds=n_folds, T=T\n)\nSerialization.serialize(joinpath(output_path,\"results_synthetic.jls\"),results)\n```\n:::\n\n\n#### Plots\n\n::: {.cell execution_count=37}\n``` {.julia .cell-code}\nusing Serialization\nresults = Serialization.deserialize(joinpath(output_path,\"results_synthetic.jls\"))\n```\n:::\n\n\n::: {.cell execution_count=38}\n``` {.julia .cell-code}\nusing Images\nline_charts = Dict()\nerrorbar_charts = Dict()\nfor (data_name, res) in results\n    plt = plot(res)\n    Images.save(joinpath(www_path, \"line_chart_$(data_name).png\"), plt)\n    line_charts[data_name] = plt\n    plt = plot(res,maximum(res.output.n))\n    Images.save(joinpath(www_path, \"errorbar_chart_$(data_name).png\"), plt)\n    errorbar_charts[data_name] = plt\nend\n```\n:::\n\n\n##### Line Charts\n\n@fig-mit-line shows the evolution of the evaluation metrics over the course of the experiment.\n\n::: {#fig-mit-line .cell layout-ncol='1' execution_count=39}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"line_chart\") .&& .!contains.(readdir(www_path),\"latent\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(load(img))\nend\n```\n\nLine Charts\n:::\n\n\n##### Error Bar Charts\n\n@fig-mit-error shows the evaluation metrics at the end of the experiments.\n\n::: {#fig-mit-error .cell layout-ncol='1' execution_count=40}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"errorbar_chart\") .&& .!contains.(readdir(www_path),\"latent\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(load(img))\nend\n```\n\nError Bar Charts\n:::\n\n\n#### Bootstrap\n\n::: {.cell execution_count=41}\n``` {.julia .cell-code}\nn_bootstrap = 10\ndf = run_bootstrap(results, n_bootstrap; filename=joinpath(output_path,\"bootstrap_synthetic.csv\"))\n```\n:::\n\n\n#### Chart in paper\n\n@fig-mit-paper shows the chart that went into the paper.\n\n::: {.cell execution_count=42}\n``` {.julia .cell-code}\nusing DataFrames, Statistics\ndf = results[:overlapping].output\ndf = df[df.n .== maximum(df.n),:]\ngdf = groupby(df, [:generator, :model, :n, :name, :scope])\ndf_plot = combine(gdf, :value => (x -> [(mean(x),mean(x)+std(x),mean(x)-std(x))]) => [:mean, :ymax, :ymin])\ndf_plot = df_plot[[name in [:mmd, :mmd_grid, :model_performance] for name in df_plot.name],:]\ndf_plot = df_plot[.!(df_plot.name.==:mmd .&& df_plot.scope.==:model),:]\ndf_plot = mapcols(x -> typeof(x) == Vector{Symbol} ? string.(x) : x, df_plot)\ntransform!(df_plot, :name => (X -> [x==\"mmd\" ? \"MMD (domain)\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"mmd_grid\" ? \"MMD (model)\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"model_performance\" ? \"Performance\" : x for x in X]) => :name)\ntransform!(df_plot, :generator => (X -> [x==\"Generic\" ? \"Generic (Î³=0.5)\" : x for x in X]) => :generator)\ntransform!(df_plot, :generator => (X -> [x==\"Generic_conservative\" ? \"Generic (Î³=0.9)\" : x for x in X]) => :generator)\ntransform!(df_plot, :model => (X -> [x==\"FluxEnsemble\" ? \"Deep Ensemble\" : x for x in X]) => :model)\ntransform!(df_plot, :model => (X -> [x==\"FluxModel\" ? \"MLP\" : x for x in X]) => :model)\ntransform!(df_plot, :model => (X -> [x==\"LogisticRegression\" ? \"Linear\" : x for x in X]) => :model)\n\nncol = length(unique(df_plot.model))\nnrow = length(unique(df_plot.name))\n\nusing RCall\nscale_ = 2.0\nR\"\"\"\nlibrary(data.table)\ndf_plot <- data.table($df_plot)\nmodel_order <- c(\"Linear\", \"MLP\", \"Deep Ensemble\")\ndf_plot[,model:=factor(model, levels=model_order)]\nlibrary(ggplot2)\nplt <- ggplot($df_plot) +\n    geom_bar(aes(x=n, y=mean, fill=generator), stat=\"identity\", alpha=0.5, position=\"dodge\") +\n    geom_pointrange( aes(x=n, y=mean, ymin=ymin, ymax=ymax, colour=generator), alpha=0.9, position=position_dodge(width=0.9), size=0.5) +\n    facet_grid(\n        rows = vars(name),\n        cols =  vars(model), \n        scales = \"free_y\"\n    ) +\n    labs(y = \"Value\") + \n    scale_fill_discrete(name=\"Generator:\") +\n    scale_colour_discrete(name=\"Generator:\") +\n    theme(\n        axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        legend.position=\"bottom\"\n    ) +\n    guides(fill=guide_legend(ncol=3))\ntemp_path <- file.path(tempdir(), \"plot.png\")\nggsave(temp_path,width=$ncol * $scale_,height=$nrow * $scale_ * 0.8) \n\"\"\"\n\nimg = Images.load(rcopy(R\"temp_path\"))\nImages.save(joinpath(www_path,\"paper_synthetic_results.png\"), img)\n```\n:::\n\n\n::: {#fig-mit-paper .cell execution_count=43}\n``` {.julia .cell-code}\nImages.load(joinpath(www_path,\"paper_synthetic_results.png\"))\n```\n:::\n\n\n#### Latent Space Search\n\n::: {.cell execution_count=44}\n``` {.julia .cell-code}\ngenerators = Dict(\n    :Latent=>GenericGenerator(decision_threshold=0.5),\n    :Latent_conservative=>GenericGenerator(decision_threshold=0.9),\n    :Gravitational=>GravitationalGenerator(),\n    :ClapROAR=>ClapROARGenerator()\n)\n```\n:::\n\n\n::: {.cell execution_count=45}\n``` {.julia .cell-code}\nexperiments = set_up_experiments(data_sets,models,generators)\n```\n:::\n\n\n::: {.cell execution_count=46}\n``` {.julia .cell-code}\nn_evals = 5\nn_rounds = 50\nevaluate_every = Int(round(n_rounds/n_evals))\nn_folds = 5\nT = 100\nusing Serialization\nresults = run_experiments(\n    experiments;\n    save_path=output_path,evaluate_every=evaluate_every,n_rounds=n_rounds, n_folds=n_folds, T=T\n)\nSerialization.serialize(joinpath(output_path,\"results_synthetic_latent.jls\"),results)\n```\n:::\n\n\n::: {.cell execution_count=47}\n``` {.julia .cell-code}\nusing Serialization\nresults = Serialization.deserialize(joinpath(output_path,\"results_synthetic_latent.jls\"))\n```\n:::\n\n\n::: {.cell execution_count=48}\n``` {.julia .cell-code}\nusing Images\nline_charts = Dict()\nerrorbar_charts = Dict()\nfor (data_name, res) in results\n    plt = plot(res)\n    Images.save(joinpath(www_path, \"line_chart_latent_$(data_name).png\"), plt)\n    line_charts[data_name] = plt\n    plt = plot(res,maximum(res.output.n))\n    Images.save(joinpath(www_path, \"errorbar_chart_latent_$(data_name).png\"), plt)\n    errorbar_charts[data_name] = plt\nend\n```\n:::\n\n\n#### Plots\n\n##### Line Charts\n\n@fig-mit-line-latent shows the evolution of the evaluation metrics over the course of the experiment.\n\n::: {#fig-mit-line-latent .cell layout-ncol='1' execution_count=49}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"line_chart\") .&& contains.(readdir(www_path),\"latent\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(load(img))\nend\n```\n\nLine Charts\n:::\n\n\n##### Error Bar Charts\n\n@fig-mit-error-latent shows the evaluation metrics at the end of the experiments.\n\n::: {#fig-mit-error-latent .cell layout-ncol='1' execution_count=50}\n``` {.julia .cell-code}\nimg_files = readdir(www_path)[contains.(readdir(www_path),\"errorbar_chart\") .&& contains.(readdir(www_path),\"latent\")]\nimg_files = joinpath.(www_path,img_files)\nfor img in img_files\n    display(load(img))\nend\n```\n\nError Bar Charts\n:::\n\n\n#### Bootstrap\n\n::: {.cell execution_count=51}\n``` {.julia .cell-code}\nn_bootstrap = 10\ndf = run_bootstrap(results, n_bootstrap; filename=joinpath(output_path,\"bootstrap_latent.csv\"))\n```\n:::\n\n\n#### Chart in paper\n\n@fig-mit-latent-paper shows the chart that went into the paper.\n\n::: {.cell execution_count=52}\n``` {.julia .cell-code}\nusing DataFrames, Statistics\ndf = results[:overlapping].output\ndf = df[df.n .== maximum(df.n),:]\ngdf = groupby(df, [:generator, :model, :n, :name, :scope])\ndf_plot = combine(gdf, :value => (x -> [(mean(x),mean(x)+std(x),mean(x)-std(x))]) => [:mean, :ymax, :ymin])\ndf_plot = df_plot[[name in [:mmd, :mmd_grid, :model_performance] for name in df_plot.name],:]\ndf_plot = df_plot[.!(df_plot.name.==:mmd .&& df_plot.scope.==:model),:]\ndf_plot = mapcols(x -> typeof(x) == Vector{Symbol} ? string.(x) : x, df_plot)\ntransform!(df_plot, :name => (X -> [x==\"mmd\" ? \"MMD (domain)\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"mmd_grid\" ? \"MMD (model)\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"model_performance\" ? \"Performance\" : x for x in X]) => :name)\ntransform!(df_plot, :generator => (X -> [x==\"Latent\" ? \"Latent (Î³=0.5)\" : x for x in X]) => :generator)\ntransform!(df_plot, :generator => (X -> [x==\"Latent_conservative\" ? \"Latent (Î³=0.9)\" : x for x in X]) => :generator)\ntransform!(df_plot, :model => (X -> [x==\"FluxEnsemble\" ? \"Deep Ensemble\" : x for x in X]) => :model)\ntransform!(df_plot, :model => (X -> [x==\"FluxModel\" ? \"MLP\" : x for x in X]) => :model)\ntransform!(df_plot, :model => (X -> [x==\"LogisticRegression\" ? \"Linear\" : x for x in X]) => :model)\n\nncol = length(unique(df_plot.model))\nnrow = length(unique(df_plot.name))\n\nusing RCall\nscale_ = 1.9\nR\"\"\"\nlibrary(data.table)\ndf_plot <- data.table($df_plot)\nmodel_order <- c(\"Linear\", \"MLP\", \"Deep Ensemble\")\ndf_plot[,model:=factor(model, levels=model_order)]\nlibrary(ggplot2)\nplt <- ggplot($df_plot) +\n    geom_bar(aes(x=n, y=mean, fill=generator), stat=\"identity\", alpha=0.5, position=\"dodge\") +\n    geom_pointrange( aes(x=n, y=mean, ymin=ymin, ymax=ymax, colour=generator), alpha=0.9, position=position_dodge(width=0.9), size=0.5) +\n    facet_grid(\n        rows = vars(name),\n        cols =  vars(model), \n        scales = \"free_y\"\n    ) +\n    labs(y = \"Value\") + \n    scale_fill_discrete(name=\"Generator:\") +\n    scale_colour_discrete(name=\"Generator:\") +\n    theme(\n        axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        legend.position=\"bottom\"\n    ) +\n    guides(fill=guide_legend(ncol=4))\ntemp_path <- file.path(tempdir(), \"plot.png\")\nggsave(temp_path,width=$ncol * $scale_,height=$nrow * $scale_ * 0.8) \n\"\"\"\n\nimg = Images.load(rcopy(R\"temp_path\"))\nImages.save(joinpath(www_path,\"paper_synthetic_latent_results.png\"), img)\n```\n:::\n\n\n::: {#fig-mit-latent-paper .cell execution_count=53}\n``` {.julia .cell-code}\nImages.load(joinpath(www_path,\"paper_synthetic_latent_results.png\"))\n```\n:::\n\n\n## Real World\n\n::: {.cell execution_count=54}\n``` {.julia .cell-code}\ngenerators = Dict(\n    :Generic=>GenericGenerator(decision_threshold=0.5),\n    :Latent=>REVISEGenerator(),\n    :Generic_conservative=>GenericGenerator(decision_threshold=0.9),\n    :Gravitational=>GravitationalGenerator(),\n    :ClapROAR=>ClapROARGenerator()\n)\n```\n:::\n\n\n::: {.cell execution_count=55}\n``` {.julia .cell-code}\nmax_obs = 2500\ndata_path = data_dir(\"real_world\")\ndata_sets = AlgorithmicRecourseDynamics.Data.load_real_world(max_obs; data_dir=data_path)\nchoices = [\n    :cal_housing, \n    :credit_default, \n    :gmsc, \n]\ndata_sets = filter(p -> p[1] in choices, data_sets)\n```\n:::\n\n\n::: {.cell execution_count=56}\n``` {.julia .cell-code}\nusing CounterfactualExplanations.DataPreprocessing: unpack\nbs = 500\nfunction data_loader(data::CounterfactualData)\n    X, y = unpack(data)\n    data = Flux.DataLoader((X,y),batchsize=bs)\n    return data\nend\nmodel_params = (batch_norm=false,n_hidden=64,n_layers=3,dropout=true,p_dropout=0.1)\n```\n:::\n\n\n::: {.cell execution_count=57}\n``` {.julia .cell-code}\nexperiments = set_up_experiments(\n    data_sets,models,generators; \n    pre_train_models=100, model_params=model_params, \n    data_loader=data_loader\n)\n```\n:::\n\n\n::: {.cell execution_count=58}\n``` {.julia .cell-code}\nn_evals = 5\nn_rounds = 50\nevaluate_every = Int(round(n_rounds/n_evals))\nn_folds = 5\nn_samples = 10000\nT = 100\ngenerative_model_params = (epochs=250, latent_dim=8)\nresults = run_experiments(\n    experiments;\n    save_path=output_path,evaluate_every=evaluate_every,n_rounds=n_rounds, n_folds=n_folds, T=T, n_samples=n_samples,\n    generative_model_params=generative_model_params\n)\nSerialization.serialize(joinpath(output_path,\"results_real_world.jls\"),results)\n```\n:::\n\n\n::: {.cell execution_count=59}\n``` {.julia .cell-code}\nusing Serialization\nresults = Serialization.deserialize(joinpath(output_path,\"results_real_world.jls\"))\n```\n:::\n\n\n::: {.cell execution_count=60}\n``` {.julia .cell-code}\nusing Images\nline_charts = Dict()\nerrorbar_charts = Dict()\nfor (data_name, res) in results\n    plt = plot(res)\n    Images.save(joinpath(www_path, \"line_chart_$(data_name).png\"), plt)\n    line_charts[data_name] = plt\n    plt = plot(res,maximum(res.output.n))\n    Images.save(joinpath(www_path, \"errorbar_chart_$(data_name).png\"), plt)\n    errorbar_charts[data_name] = plt\nend\n```\n:::\n\n\n#### Bootstrap\n\n::: {.cell execution_count=61}\n``` {.julia .cell-code}\nn_bootstrap = 10\ndf = run_bootstrap(results, n_bootstrap; filename=joinpath(output_path,\"bootstrap_real_world.csv\"))\n```\n:::\n\n\n#### Chart in paper\n\n@fig-mit-latent-paper shows the chart that went into the paper.\n\n::: {.cell execution_count=62}\n``` {.julia .cell-code}\nusing DataFrames, Statistics\nmodel_ = :FluxEnsemble\ndf = DataFrame() \nfor (key, val) in results\n    df_ = deepcopy(val.output)\n    df_.dataset .= key\n    df = vcat(df,df_)\nend\ndf = df[df.n .== maximum(df.n),:]\ndf = df[df.model .== model_,:]\nfilter!(:value => x -> !any(f -> f(x), (ismissing, isnothing, isnan)), df)\ngdf = groupby(df, [:generator, :dataset, :n, :name, :scope])\ndf_plot = combine(gdf, :value => (x -> [(mean(x),mean(x)+std(x),mean(x)-std(x))]) => [:mean, :ymax, :ymin])\ndf_plot = df_plot[[name in [:mmd, :model_performance] for name in df_plot.name],:]\ndf_plot = df_plot[.!(df_plot.name.==:mmd .&& df_plot.scope.!=:model),:]\ndf_plot = mapcols(x -> typeof(x) == Vector{Symbol} ? string.(x) : x, df_plot)\ntransform!(df_plot, :dataset => (X -> [x==\"cal_housing\" ? \"California Housing\" : x for x in X]) => :dataset)\ntransform!(df_plot, :dataset => (X -> [x==\"credit_default\" ? \"Credit Default\" : x for x in X]) => :dataset)\ntransform!(df_plot, :dataset => (X -> [x==\"gmsc\" ? \"GMSC\" : x for x in X]) => :dataset)\ntransform!(df_plot, :name => (X -> [x==\"mmd\" ? \"MMD (model)\" : x for x in X]) => :name)\ntransform!(df_plot, :name => (X -> [x==\"model_performance\" ? \"Performance\" : x for x in X]) => :name)\ntransform!(df_plot, :generator => (X -> [x==\"Generic\" ? \"Generic (Î³=0.5)\" : x for x in X]) => :generator)\ntransform!(df_plot, :generator => (X -> [x==\"Generic_conservative\" ? \"Generic (Î³=0.9)\" : x for x in X]) => :generator)\n\nncol = length(unique(df_plot.dataset))\nnrow = length(unique(df_plot.name))\n\nusing RCall\nscale_ = 2.0\nR\"\"\"\nlibrary(ggplot2)\nplt <- ggplot($df_plot) +\n    geom_bar(aes(x=n, y=mean, fill=generator), stat=\"identity\", alpha=0.5, position=\"dodge\") +\n    geom_pointrange( aes(x=n, y=mean, ymin=ymin, ymax=ymax, colour=generator), alpha=0.9, position=position_dodge(width=0.9), size=0.5) +\n    facet_grid(\n        rows = vars(name),\n        cols =  vars(dataset), \n        scales = \"free_y\"\n    ) +\n    labs(y = \"Value\") + \n    scale_fill_discrete(name=\"Generator:\") +\n    scale_colour_discrete(name=\"Generator:\") +\n    theme(\n        axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        legend.position=\"bottom\"\n    ) +\n    guides(fill=guide_legend(ncol=3))\ntemp_path <- file.path(tempdir(), \"plot.png\")\nggsave(temp_path,width=$ncol * $scale_,height=$nrow * $scale_ * 0.85) \n\"\"\"\n\nimg = Images.load(rcopy(R\"temp_path\"))\nImages.save(joinpath(www_path,\"paper_real_world_results.png\"), img)\n```\n:::\n\n\n::: {#fig-mit-real-paper .cell execution_count=63}\n``` {.julia .cell-code}\nImages.load(joinpath(www_path,\"paper_real_world_results.png\"))\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}