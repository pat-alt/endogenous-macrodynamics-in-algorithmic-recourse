# Results: Synthetic Data {#sec-app-synthetic}

This notebook was used to run the experiments for the synthetic datasets and can be used to reproduce the results in the paper. In the following we first run the experiments and then generate visualizations and tables.

## Experiment

```{julia}
#| echo: false
#| eval: true

include("src/setup.jl")
eval(setup)
output_path = output_dir("synthetic") # output directory for artifacts
www_path = www_dir("synthetic")       # output directory for images
data_path = data_dir("synthetic")

# Artifacts:
# Images:
artifact_name = create_artifact_name_from_path(www_path, nothing)
_hash = artifact_hash(artifact_name, artifact_toml)
www_artifact_path = joinpath(artifact_path(_hash), artifact_name)
# Output:
artifact_name = create_artifact_name_from_path(output_path, nothing)
_hash = artifact_hash(artifact_name, artifact_toml)
output_artifact_path = joinpath(artifact_path(_hash), artifact_name)
```

```{julia}
models = [
    :LogisticRegression, 
    :FluxModel, 
    :FluxEnsemble,
]
opt = Flux.Descent(0.01) 
generators = Dict(
    :Greedy=>GreedyGenerator(), 
    :Generic=>GenericGenerator(opt = opt),
    :REVISE=>REVISEGenerator(opt = opt),
    :DICE=>DiCEGenerator(opt = opt),
)
```

```{julia}
max_obs = 1000
catalogue = load_synthetic(max_obs)
choices = [
    :linearly_separable, 
    :overlapping, 
    :circles, 
    :moons,
]
data_sets = filter(p -> p[1] in choices, catalogue)
```

```{julia}
experiments = set_up_experiments(data_sets,models,generators)
```

```{julia}
plts = []
for (exp_name, exp_) in experiments
    for (M_name, M) in exp_.models
        score = round(model_evaluation(M, exp_.test_data),digits=2)
        plt = plot(M, exp_.test_data, title="$exp_name;\n $M_name ($score)")
        # Errors:
        ids = findall(vec(round.(probs(M, exp_.test_data.X)) .!= exp_.test_data.y))
        x_wrongly_labelled = exp_.test_data.X[:,ids]
        scatter!(plt, x_wrongly_labelled[1,:], x_wrongly_labelled[2,:], ms=7.5, color=:red, label="")
        plts = vcat(plts..., plt)
    end
end
plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))
savefig(plt, joinpath(www_path,"models_test_before.png"))
```

```{julia}
using AlgorithmicRecourseDynamics.Models: model_evaluation
plts = []
for (exp_name, exp_) in experiments
    for (M_name, M) in exp_.models
        score = round(model_evaluation(M, exp_.train_data),digits=2)
        plt = plot(M, exp_.train_data, title="$exp_name;\n $M_name ($score)")
        # Errors:
        ids = findall(vec(round.(probs(M, exp_.train_data.X)) .!= exp_.train_data.y))
        x_wrongly_labelled = exp_.train_data.X[:,ids]
        scatter!(plt, x_wrongly_labelled[1,:], x_wrongly_labelled[2,:], ms=7.5, color=:red, label="")
        plts = vcat(plts..., plt)
    end
end
plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))
savefig(plt, joinpath(www_path,"models_train_before.png"))
```

```{julia}
n_evals = 5
n_rounds = 50
evaluate_every = Int(round(n_rounds/n_evals))
n_folds = 5
T = 100
results = run_experiments(
    experiments;
    save_path=output_path,evaluate_every=evaluate_every,n_rounds=n_rounds, n_folds=n_folds, T=T
)
Serialization.serialize(joinpath(output_path,"results.jls"),results)
```

```{julia}
plot_dict = Dict(key => Dict() for (key,val) in results)
fold = 1
for (name, res) in results
    exp_ = res.experiment
    plot_dict[name] = Dict(key => [] for (key,val) in exp_.generators)
    rec_sys = exp_.recourse_systems[fold]
    sys_ids = collect(exp_.system_identifiers)
    M = length(rec_sys)
    for m in 1:M
        model_name, generator_name = sys_ids[m]
        M = rec_sys[m].model
        score = round(model_evaluation(M, exp_.test_data),digits=2)
        plt = plot(M, exp_.test_data, title="$name;\n $model_name ($score)")
        # Errors:
        ids = findall(vec(round.(probs(M, exp_.test_data.X)) .!= exp_.test_data.y))
        x_wrongly_labelled = exp_.test_data.X[:,ids]
        scatter!(plt, x_wrongly_labelled[1,:], x_wrongly_labelled[2,:], ms=7.5, color=:red, label="")
        plot_dict[name][generator_name] = vcat(plot_dict[name][generator_name], plt)
    end
end
plot_dict = Dict(key => reduce(vcat, [plots[key] for plots in values(plot_dict)]) for (key, value) in generators)
for (name, plts) in plot_dict
    plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))
    savefig(plt, joinpath(www_path,"models_test_after_$(name).png"))
end
```

```{julia}
using AlgorithmicRecourseDynamics.Models: model_evaluation
plot_dict = Dict(key => Dict() for (key,val) in results)
fold = 1
for (name, res) in results
    exp_ = res.experiment
    plot_dict[name] = Dict(key => [] for (key,val) in exp_.generators)
    rec_sys = exp_.recourse_systems[fold]
    sys_ids = collect(exp_.system_identifiers)
    M = length(rec_sys)
    for m in 1:M
        model_name, generator_name = sys_ids[m]
        M = rec_sys[m].model
        data = rec_sys[m].data
        score = round(model_evaluation(M, data),digits=2)
        plt = plot(M, data, title="$name;\n $model_name ($score)")
        # Errors:
        ids = findall(vec(round.(probs(M, data.X)) .!= data.y))
        x_wrongly_labelled = data.X[:,ids]
        scatter!(plt, x_wrongly_labelled[1,:], x_wrongly_labelled[2,:], ms=7.5, color=:red, label="")
        plot_dict[name][generator_name] = vcat(plot_dict[name][generator_name], plt)
    end
end
plot_dict = Dict(key => reduce(vcat, [plots[key] for plots in values(plot_dict)]) for (key, value) in generators)
for (name, plts) in plot_dict
    plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))
    savefig(plt, joinpath(www_path,"models_train_after_$(name).png"))
end
```

## Plots

```{julia}
results = Serialization.deserialize(joinpath(output_path,"results.jls"));
```

```{julia}
#| echo: false
Plots.scalefontsizes(2)
df_plot = results[:overlapping].output |>
    df -> filter(:name => ==(:mmd), df) |>
    df -> filter(:model => ==(:FluxEnsemble), df) |>
    df -> filter(:scope => ==(:domain), df) |>
    df -> filter(:n => >(0), df) 

ylims = (0, 1.2 * maximum(df_plot.value))

anim = @animate for i in sort(unique(df_plot.n))
    df = filter(:n => ==(i) ,df_plot) |>
        df -> combine(groupby(df, :generator), :value => mean, :value => std)
    plt = bar(
        string.(df.generator), df.value_mean, c=:blues, lw=0, widen=false,
        legend=false,
        ylims = ylims,
        title = "Number of rounds: $(i)"
    )
    n_gen = length(unique(df.generator))
    plot!((0:(n_gen-1)) .+ 0.5, df.value_mean, yerror=df.value_std, ms=10, color="transparent")
    scatter!((0:(n_gen-1)) .+ 0.5, df.value_mean, ms=10, c=:blues)
end
gif(anim, "dev/presentation/www/synthetic_domain.gif", fps=0.5)
Plots.scalefontsizes()
```

```{julia}
#| echo: false
Plots.scalefontsizes(2)
df_plot = results[:overlapping].output |>
    df -> filter(:name => ==(:model_performance), df) |>
    df -> filter(:model => ==(:FluxEnsemble), df) |>
    df -> filter(:scope => ==(:model), df) |>
    df -> filter(:n => >(0), df) 

ylims = (1.2 * minimum(df_plot.value), 0)

anim = @animate for i in sort(unique(df_plot.n))
    df = filter(:n => ==(i) ,df_plot) |>
        df -> combine(groupby(df, :generator), :value => mean, :value => std)
    plt = bar(
        string.(df.generator), df.value_mean, c=:blues, lw=0, widen=false,
        legend=false,
        ylims = ylims,
        title = "Number of rounds: $(i)"
    )
    n_gen = length(unique(df.generator))
    plot!((0:(n_gen-1)) .+ 0.5, df.value_mean, yerror=df.value_std, ms=10, color="transparent")
    scatter!((0:(n_gen-1)) .+ 0.5, df.value_mean, ms=10, c=:blues)
end
gif(anim, "dev/presentation/www/synthetic_performance.gif", fps=0.5)
Plots.scalefontsizes()
```

```{julia}
df = DataFrame(group=["A", "B", "C"], total=[7.7, 4.6, 5.1], std_error = [0.04, 0.05, 0.06])
bar(df.group, df.total, c=:blues, lw=0, widen=false)
plot!(1/2:(ncol(df)-1/2), df.total, lw=0, yerror=20*df.std_error, ms=10)
```



```{julia}
using Images
line_charts = Dict()
errorbar_charts = Dict()
for (data_name, res) in results
    plt = plot(res)
    Images.save(joinpath(www_path, "line_chart_$(data_name).png"), plt)
    line_charts[data_name] = plt
    plt = plot(res,maximum(res.output.n))
    Images.save(joinpath(www_path, "errorbar_chart_$(data_name).png"), plt)
    errorbar_charts[data_name] = plt
end
```

### Line Charts

@fig-line shows the evolution of the evaluation metrics over the course of the experiment.

```{julia}
#| output: true
#| fig-cap: "Line Charts"
#| fig-subcap: 
#|      - "Circles"
#|      - "Linearly Separable"
#|      - "Moons"
#|      - "Overlapping"
#| layout-ncol: 1
#| label: fig-line
#| eval: true
#| echo: false

img_files = readdir(www_artifact_path)[contains.(readdir(www_artifact_path),"line_chart")]
img_files = joinpath.(www_artifact_path,img_files)
for img in img_files
    display(Images.load(img))
end
```

### Error Bar Charts

@fig-error shows the evaluation metrics at the end of the experiments.

```{julia}
#| output: true
#| fig-cap: "Error Bar Charts"
#| fig-subcap: 
#|      - "Circles"
#|      - "Linearly Separable"
#|      - "Moons"
#|      - "Overlapping"
#| layout-ncol: 1
#| label: fig-error
#| eval: true
#| echo: false

img_files = readdir(www_artifact_path)[contains.(readdir(www_artifact_path),"errorbar_chart")]
img_files = joinpath.(www_artifact_path,img_files)
for img in img_files
    display(Images.load(img))
end
```

## Bootstrap

```{julia}
n_bootstrap = 100
df = run_bootstrap(results, n_bootstrap; filename=joinpath(output_path,"bootstrap.csv"))
```

```{julia}
#| output: true
#| eval: true
#| echo: false

_file = readdir(output_artifact_path)[contains.(readdir(output_artifact_path),"bootstrap")]
_file = joinpath.(output_artifact_path, _file)
df = CSV.File(_file) |> DataFrame
df = df[.!(ismissing.(df.p_value)),:]
df = combine(groupby(df, [:name, :scope, :data, :model, :generator]), :p_value => mean)
ENV["LINES"] = size(df, 1)
pretty_table(df)
```


## Chart in paper {#sec-app-synthetic-paper}

@fig-paper shows the chart that went into the paper.

```{julia}
#| echo: false

using DataFrames, Statistics
df = results[:overlapping].output
df = df[[x ∈ maximum(df.n) for x in df.n],:]
gdf = groupby(df, [:generator, :model, :n, :name, :scope])
df_plot = combine(gdf, :value => (x -> [(mean(x),mean(x)+std(x),mean(x)-std(x))]) => [:mean, :ymax, :ymin])
df_plot = df_plot[[name in [:decisiveness, :disagreement, :mmd, :mmd_grid, :model_performance] for name in df_plot.name],:]
df_plot = df_plot[.!(df_plot.name.==:mmd .&& df_plot.scope.==:model),:]
df_plot = mapcols(x -> typeof(x) == Vector{Symbol} ? string.(x) : x, df_plot)
transform!(df_plot, :name => (X -> [x=="decisiveness" ? "Decisiveness" : x for x in X]) => :name)
transform!(df_plot, :name => (X -> [x=="disagreement" ? "Disagreement" : x for x in X]) => :name)
transform!(df_plot, :name => (X -> [x=="mmd" ? "MMD (domain)" : x for x in X]) => :name)
transform!(df_plot, :name => (X -> [x=="mmd_grid" ? "MMD (model)" : x for x in X]) => :name)
transform!(df_plot, :name => (X -> [x=="model_performance" ? "Performance" : x for x in X]) => :name)
transform!(df_plot, :generator => (X -> [x=="REVISE" ? "Latent" : x for x in X]) => :generator)
transform!(df_plot, :model => (X -> [x=="FluxEnsemble" ? "Deep Ensemble" : x for x in X]) => :model)
transform!(df_plot, :model => (X -> [x=="FluxModel" ? "MLP" : x for x in X]) => :model)
transform!(df_plot, :model => (X -> [x=="LogisticRegression" ? "Linear" : x for x in X]) => :model)

ncol = length(unique(df_plot.model))
nrow = length(unique(df_plot.name))

scale_ = 1.5
R"""
library(data.table)
df_plot <- data.table($df_plot)
name_order <- c(
    "MMD (domain)",
    "MMD (model)",
    "Performance",
    "Disagreement",
    "Decisiveness"
)
df_plot[,name:=factor(name, levels=name_order)]
model_order <- c("Linear", "MLP", "Deep Ensemble")
df_plot[,model:=factor(model, levels=model_order)]
library(ggplot2)
plt <- ggplot(df_plot) +
    geom_bar(aes(x=n, y=mean, fill=generator), stat="identity", alpha=0.5, position="dodge") +
    geom_pointrange(aes(x=n, y=mean, ymin=ymin, ymax=ymax, colour=generator), alpha=0.9, position=position_dodge(width=c(0.9,0.9)), size=0.5) +
    facet_grid(
        rows = vars(name),
        cols =  vars(model), 
        scales = "free_y"
    ) +
    labs(y = "Value") + 
    scale_fill_discrete(name="Generator:") +
    scale_colour_discrete(name="Generator:") +
    theme(
        axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        legend.position="bottom"
    )
temp_path <- file.path(tempdir(), "plot.png")
ggsave(temp_path, width=$ncol * $scale_,height=$nrow * $scale_ * 0.75) 
"""

img = Images.load(rcopy(R"temp_path"))
Images.save(joinpath(www_path,"paper_synthetic_results.png"), img)
```


```{julia}
#| output: true
#| label: fig-paper
#| fig-cap: "Chart in paper"
#| eval: true

Images.load(joinpath(www_artifact_path,"paper_synthetic_results.png"))
```

```{julia}
# echo: false

generate_artifacts(output_path)
generate_artifacts(www_path)
```